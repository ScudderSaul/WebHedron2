@using System.Reflection.Emit
@using WebHedron2.Tools

@model WebHedron2.Tools.HedronModelText
@{
    ViewBag.Title = "ShowHedron";
}
<div class="container-fluid">
    <h2>Show Hedron II</h2>
    <p >
        Data for shapes was generated by Mathematica moved into c# classes and is displayed using Scalable Vector Graphics in HTML5.
        The application is MVC and generates the page for each shape. Clicking on the name will try to use WolframAlpha to look it up
    </p>
    <div class="col-xs-12 col-lg-3">
        @using (Html.BeginForm("ShowHedron", "Home", FormMethod.Post, new { id = "hedform" }))
        {
            double cx = (double)ViewData["MVI"] * 100.0;
            double cy = (double)ViewData["MVJ"] * 100.0;
            double cz = (double)ViewData["MVK"] * 100.0;
            int ccx = (int)cx;
            int ccy = (int)cy;
            int ccz = (int)cz;
            bool itspins = (bool)ViewData["itspins"];
            int togg = (int)ViewData["toggle"];

            <fieldset>

                Hedron Type

                @Html.DropDownList("selecthedron")

                Opacity

                @Html.DropDownList("opacity")

                <p>
                    Axis of rotations


                    @Html.JQueryUI().Slider("Valuex", ccx).Min(-100).Max(100).Orientation(Orientation.Horizontal).ContainerCssClass("slider").Label("X: ")
                    @Html.JQueryUI().Slider("Valuey", ccy).Min(-100).Max(100).Orientation(Orientation.Horizontal).ContainerCssClass("slider").Label("Y: ")
                    @Html.JQueryUI().Slider("Valuez", ccz).Min(-100).Max(100).Orientation(Orientation.Horizontal).ContainerCssClass("slider").Label("Z: ")

                </p>
                <p>
                    Spin : @Html.CheckBox("spinner", itspins)
                    @Html.Hidden("toggle", togg)

                </p>

                <p>

                    <input class="btn btn-primary" type="button" id="sbutton" value="Submit">
                </p>

                <script>

                    window.addEventListener("DOMContentLoaded", function () {
                        var form = document.getElementById("hedform");

                        document.getElementById("sbutton").addEventListener("click", function () {
                            form.submit();
                        });

                        document.getElementById("spinner").addEventListener("click", function () {
                            if (document.getElementById("toggle").value == "2") {
                                document.getElementById("toggle").value = "1";
                                form.submit();
                            } else {
                                document.getElementById("toggle").value = "2";
                            }
                        });

                        var myVar = setInterval(function () {
                            if (document.getElementById("toggle").value == "2") {
                                form.submit();
                            }
                        }, 300);

                        document.getElementById("selecthedron").focus();
                    });

                </script>


            </fieldset>
        }


        @{
            string namewithspaces = string.Empty;
            string nameupper = ViewBag.HedronName.ToUpper();
            int tlen = ViewBag.HedronName.Length - 4;

            for (int ii = 0; ii < ViewBag.HedronName.Length; ii++)
            {
                if (nameupper[ii] == ViewBag.HedronName[ii])
                {
                    namewithspaces += "%20";
                }
                if (ii > tlen && char.IsDigit(ViewBag.HedronName, ii) == true)
                {
                    break;
                }
                namewithspaces += ViewBag.HedronName[ii];
            }
        }

        <p>
            <a href="http://www.wolframalpha.com/input/?i=@namewithspaces&x=0&y=0">@ViewBag.HedronName</a>
        </p>
    </div>
    <div class="col-xs-12 col-lg-9">
        
        <svg height="900" width="900">
            
            @foreach (PolygonText pt in Model.PolygonTextList)
            {
                <polygon points="@pt.AllPoints"
                         style="fill: @pt.Fill; stroke: @pt.StrokeColor; stroke-width: @pt.StrokeThick"/>
            }




        </svg>
    </div>
</div>
